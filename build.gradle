import groovyx.gpars.GParsPool
import groovy.xml.NamespaceBuilder
import org.kohsuke.github.GitHub

buildscript {
    repositories {
        mavenCentral()
        maven {
            url  "http://repo.jenkins-ci.org/releases/" 
        }
    }
    dependencies {
        classpath group: 'org.codehaus.gpars', name: 'gpars', version: '1.1.0'
        classpath group: 'org.kohsuke', name: 'github-api', version: '1.+'
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'

eclipse {
    jdt {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }
}

def javaHome = System.properties['java.home']

ext.extProp = new Properties()
extProp.load(new FileInputStream("src/main/resources/version.properties"))
def version = extProp["version"]

def dist = 'build/dist/'
def archivePath = dist + 'ShootOFF.jar'
def libTempDir = dist + 'libs'
def webstartDir = 'build/webstart'
def mainClassName = 'com.shootoff.Main'
def writableResources = 'shootoff-writable-resources.jar'
def license = 'GPLv3'

def keyStore = 'shootoff_cs.jks'
def keyAlias = 'cscert'
def tsaURL = 'http://timestamp.comodoca.com/rfc3161'

repositories {
    mavenCentral()
    // Next 2 are used for tts
    maven {
        url  "http://dl.bintray.com/marytts/marytts" 
    }
    maven {
        url  "http://dl.bintray.com/dfki-lt/maven" 
    }
    maven {
        url  "http://xuggle.googlecode.com/svn/trunk/repo/share/java/" 
    }
}

configurations {
    jfxant

    // Some dependencies (webcam-capture and marytts?) pull in slf4j implementations that conflict
    // with logback
    compile.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
}

dependencies {
    jfxant files("$javaHome" + "/../lib/ant-javafx.jar")

    // Raven, exception reporting client (requires logback)
    compile group: 'net.kencochrane.raven', name: 'raven-logback', version: '6.+'

    // Logback to enable exception reporting
    compile group: 'ch.qos.logback', name: 'logback-core', version: '1.+'
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.+'

    // bridj is here because webcam-capture depends on it but fetches 0.6.2, which
    // does not play nicely with stackguard in newer versions of the JVM.
    compile group: 'com.nativelibs4java', name: 'bridj', version: '0.7.0'    
    compile group: 'com.github.sarxos', name: 'webcam-capture', version: '0.3.+'
    compile group: 'com.github.sarxos', name: 'webcam-capture-driver-ipcam', version: '0.3.+'
    compile group: 'commons-cli', name: 'commons-cli', version: '1.+'
    compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.+'
    compile group: 'org.apache.httpcomponents', name: 'httpmime', version: '4.+'

    // tts dependencies
    compile group: 'de.dfki.mary', name: 'marytts-runtime', version: '5.1.+'
    compile group: 'de.dfki.mary', name: 'marytts-lang-en', version: '5.1.+'
    compile group: 'de.dfki.mary', name: 'voice-cmu-slt-hsmm', version: '5.1.+'

    // xuggle for recording and playing back video
    compile group: 'xuggle', name: 'xuggle-xuggler', version: '5.+'

    // JSON
    compile group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1+'
    
    // OpenImaj
    compile('org.openimaj:core:1.+') {
        // OpenImaj transitive dependency that we don't need and that doesn't seem to exist in
        // repos anymore
        exclude group: 'vigna.dsi.unimi.it'
    }
    
    //OpenCV
    compile 'org.openpnp:opencv:2.4.+'

    testCompile group: 'junit', name: 'junit', version: '4.+'
    testCompile group: 'org.hamcrest', name: 'hamcrest-core', version: '1.+'
}

test {
    onOutput { descriptor, event ->
       logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message )
    }

    testLogging {
        exceptionFormat = 'full'
    }
}

task copyConfig(type:Copy) {
    from 'shootoff.properties' into 'build/dist'
}

task copyTargets(type:Copy) {
    from 'targets' into 'build/dist/targets'
}

task copySounds(type:Copy) {
    from 'sounds' into 'build/dist/sounds'
}

task copyLibs(type:Copy) {
    from { configurations.default.collect { it.isDirectory() ? it : it } }
    into libTempDir
    exclude "*jfxrt.jar"
    exclude "*java2html.jar"
    exclude "*junit*.jar"
    exclude "*slf4j-log4j12*.jar"
    exclude "*freetts-de*.jar"
}

task updateJars() {
    doLast {
        FileCollection jars = files { file(libTempDir).listFiles() }

        jars.each {File jar ->
            ant.jar(update: "true", destfile: "${jar.path}/") {
                delegate.manifest {
                    attribute(name: 'Trusted-Library', value: 'true')
                }
            } 
        }
    }
}

task fxJar(dependsOn: build){
    dependsOn('copyConfig')
    dependsOn('copyTargets')
    dependsOn('copySounds')
    dependsOn('copyLibs')

    def antfx = NamespaceBuilder.newInstance(
            ant,
            'javafx:com.sun.javafx.tools.ant')

    ant.taskdef(
            resource: 'com/sun/javafx/tools/ant/antlib.xml',
            uri: 'javafx:com.sun.javafx.tools.ant',
            classpath: configurations.jfxant.asPath)

    doLast {
        antfx.application(
                id: project.name,
                name: project.name,
                mainClass: mainClassName)

        antfx.jar(destfile: archivePath) {
            application(refid: project.name)
            fileset(dir: sourceSets.main.output.classesDir)
            fileset(dir: sourceSets.main.output.resourcesDir)
            antfx.resources() {
                fileset(dir: 'build/dist/', includes: 'libs/*.jar')
            }
            delegate.manifest {
                attribute(name: 'Codebase', value: '*')
                attribute(name: 'Permissions', value: 'all-permissions')
                attribute(name: 'Trusted-Library', value: 'true')
                attribute(name: 'Application-Name', value: 'ShootOFF')
                attribute(name: 'Created-By', value: 'ShootOFF')
            }
        }
    }
}

task zipRelease(type: Zip){
    dependsOn('fxJar')

    from(file(dist)) {
        include 'targets/**'
        include 'sounds/**'
        include 'libs/**/*.jar'
        include 'shootoff.properties'
        include 'ShootOFF.jar'
    }

    archiveName = 'shootoff-' + version + '-final.zip'
    destinationDir = file(dist)

    doLast{
        // Create GitHub release
        def username = System.console().readLine('\nPlease enter GitHub username: ')
        def password = System.console().readPassword('Please enter GitHub password: ')
        password = new String(password)

        def gh = GitHub.connectUsingPassword(username, password)

        if (!gh.isCredentialValid()) print('Incorrect GitHub credentials')

        def ghRepo = gh.getRepository('phrack/ShootOFF-NG')
        def repoReleaseBuilder = ghRepo.createRelease(version + '-FINAL')
        repoReleaseBuilder.body('1. Download shootoff-' + version + '-final.zip and extract it.\n' +
                            '2. Double click ShootOFF.jar.')
        repoReleaseBuilder.draft(true)
        repoReleaseBuilder.commitish('master')
        repoReleaseBuilder.name('shootoff-' + version + '-final')
        def repoRelease = repoReleaseBuilder.create()
        repoRelease.uploadAsset(new File(dist + archiveName), 'application/zip')
    }
}

task fxSignedJar(dependsOn: fxJar){
    doFirst { 
        assert file(keyStore).exists() 
    }

    doLast {
        def keyPassword = System.console().readPassword("\nPlease enter key passphrase: ")
        keyPassword = new String(keyPassword)

        ant.signjar(
                jar: archivePath,
                keystore: keyStore,
                storepass: keyPassword,
                alias: keyAlias,
                tsaurl: tsaURL
        )
    }
}

task fxJarWritableResources() {
    def antfx = NamespaceBuilder.newInstance(
            ant,
            'javafx:com.sun.javafx.tools.ant')

    doLast {
        ant.jar(destfile: "${project.buildDir}/webstart/" + writableResources) {
            fileset(dir: 'build/dist/', includes: 'targets/**')
            fileset(dir: 'build/dist/', includes: 'sounds/**')
            fileset(dir: 'build/dist/', includes: 'shootoff.properties')

            delegate.manifest {
                attribute(name: 'Trusted-Library', value: 'true')
            }
        }
    }
}

task fxWebstartSignedJar(){
    dependsOn(fxJar)
    dependsOn('updateJars')
    dependsOn(fxJarWritableResources)

    doFirst { 
        assert file(keyStore).exists() 
    }

    doLast {
        def keyPassword = System.console().readPassword("\nPlease enter key passphrase: ")
        keyPassword = new String(keyPassword)

        ant.signjar(
            keystore: keyStore,
            storepass: keyPassword,
            alias: keyAlias,
            tsaurl: tsaURL
        ) {
                ant.fileset(
                    dir: 'build/dist/',
                    includes: '*.jar'
                )
        }

        def path = ant.path {
                ant.fileset(
                    dir: 'build/dist/',
                    includes: 'libs/*.jar',
                )
        }

        GParsPool.withPool {
            path.list().eachParallel { f ->       
                def antLocal = project.createAntBuilder()
                antLocal.signjar(
                        jar: f,
                        keystore: keyStore,
                        storepass: keyPassword,
                        alias: keyAlias,
                        tsaurl: tsaURL
                )
            }
        }
    }
}

task fxRelease(dependsOn: fxWebstartSignedJar){
    def antfx = NamespaceBuilder.newInstance(
            ant,
            'javafx:com.sun.javafx.tools.ant')

    doLast {
        antfx.deploy(
                codebase: "http://shootoffapp.com/jws/",
                outdir: "${project.buildDir}/webstart",
                outfile: project.name
        ) {
            antfx.application(
                mainClass: mainClassName,
                name: 'ShootOFF',
                toolkit: 'fx',
                version: version
            )

            antfx.platform(
                javafx: '8.0+',
                j2se: '1.8+'
            )

            antfx.info(
                title: project.name,
                vendor: project.name,
                license: license,
                description: 'A virtual shooting range to enhance laser dry fire training.'
            ) {
                antfx.icon(
                    kind: 'shortcut',
                    href: 'icon_32x32.png',
                    width: '32', 
                    height: '32'
                )
            }

            antfx.permissions(
                elevated: true,
                cachecertificates: true
            )

            antfx.preferences(
                shortcut: true,
                install: false,
                menu: false
            )

            antfx.resources {
                antfx.fileset(
                    dir: 'build/dist/',
                    includes: 'ShootOFF.jar'
                )

                antfx.fileset(
                    dir: 'build/dist/',
                    includes: 'libs/*.jar'
                )

                antfx.fileset(
                    type: 'icon',
                    dir: 'src/main/resources/images/',
                    includes: 'icon_32x32.png'
                )
            }
        }

        def jnlpPath = "${project.buildDir}/webstart/" + project.name + '.jnlp'
        String contents = new File(jnlpPath).getText('UTF-8') 
        
        // Can't update HREF in jnlp tag with antfx
        contents = contents.replace('href=\"ShootOFF.jnlp\">', 
            'href=\"http://shootoffapp.com/jws/ShootOFF.jnlp\">')
        
        // antfx.icon is not working for jnlp
        contents = contents.replace('<offline-allowed/>',
            '<icon href=\"icon_32x32.png\" width=\"32\" height=\"32\" />\n    <offline-allowed/>')

        new File(jnlpPath).write(contents, 'UTF-8')
    }
}

task release(){
    dependsOn(zipRelease)
    dependsOn(fxRelease)
}

release.doLast {
    // Some of these are worth trying to automate later!
    print("-----------------------------------------\n" +
          "REMAINING RELEASE TASKS\n" + 
          "-----------------------------------------\n\n" +
          "- Publish release draft\n" + 
          "- Commit JWS artifacts\n" + 
          "- Update website\n" + 
          "- Make Reddit release post\n" + 
          "- Make Twitter release post\n" + 
          "- Make release email")
}
