import groovy.xml.NamespaceBuilder

apply plugin: 'java'
apply plugin: 'eclipse'

def javaHome = System.properties['java.home']

def archivePath = 'build/dist/ShootOFF.jar'
def libTempDir = "build/dist/libs"
def mainClassName = 'com.shootoff.Main'
def version = '3.0'

repositories {
    mavenCentral()
    // Next 2 are used for tts
    maven {
        url  "http://dl.bintray.com/marytts/marytts" 
    }
    maven {
        url  "http://dl.bintray.com/dfki-lt/maven" 
    }
}

configurations {
    jfxant
}

task copyTargets(type:Copy) {
    from 'targets' into 'build/dist/targets'
}


task copySounds(type:Copy) {
    from 'sounds' into 'build/dist/sounds'
}

task copyLibs(type:Copy) {
    from { configurations.default.collect { it.isDirectory() ? it : it } }
    into libTempDir
    exclude "*jfxrt.jar"
    exclude "*java2html.jar"
}

dependencies {
    jfxant files("$javaHome" + "/../lib/ant-javafx.jar")
    
    // webcam-capture depends on slf4j, but uses and older and incomplete version that
    // throws errors about missing a logger
    compile group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.12'
    // bridj is here because webcam-capture depends on it but fetches 0.6.2, which
    // does not play nicely with stackguard in newer versions of the JVM.
    compile group: 'com.nativelibs4java', name: 'bridj', version: '0.7.0'    
    compile group: 'com.github.sarxos', name: 'webcam-capture', version: '0.3.10'
    compile group: 'commons-cli', name: 'commons-cli', version: '1.+'

    // tts dependencies
    compile group: 'de.dfki.mary', name: 'marytts-runtime', version: '5.+'
    compile group: 'de.dfki.mary', name: 'marytts-lang-en', version: '5.+'
    compile group: 'de.dfki.mary', name: 'voice-cmu-slt-hsmm', version: '5.+'

    testCompile group: 'junit', name: 'junit', version: '4.+'
}

task fxJar(dependsOn: build){
    dependsOn('copyTargets')
    dependsOn('copySounds')
    dependsOn('copyLibs')

    def antfx = NamespaceBuilder.newInstance(
            ant,
            'javafx:com.sun.javafx.tools.ant')

    ant.taskdef(
            resource: 'com/sun/javafx/tools/ant/antlib.xml',
            uri: 'javafx:com.sun.javafx.tools.ant',
            classpath: configurations.jfxant.asPath)

    doLast {
        antfx.application(
                id: project.name,
                name: project.name,
                mainClass: mainClassName)

        antfx.jar(destfile: archivePath) {
            application(refid: project.name)
            fileset(dir: sourceSets.main.output.classesDir)
            fileset(dir: sourceSets.main.output.resourcesDir)
            antfx.resources() {
                fileset(dir: libTempDir + '/../')
            }
        }
    }
}
